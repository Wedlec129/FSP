
//  –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Twitter
async function loginToTwitter(page, username, password ) {
    try {
        console.log('1Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ Twitter...');
        await page.goto('https://x.com/login', { waitUntil: 'networkidle2' });

        console.log('2Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –ª–æ–≥–∏–Ω–∞...');
        await page.waitForSelector('input[autocomplete="username"]', { timeout: 15000 });

        console.log('3Ô∏è‚É£ –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞...');
        await page.type('input[autocomplete="username"]', username, { delay: 100 });

        console.log('4Ô∏è‚É£ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"...');
        const nextButton = await page.$$('button');
        await nextButton[3].click();

        console.log('5Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É, –µ—Å–ª–∏ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ...');

        await page.waitForNavigation({ waitUntil: 'networkidle2' });

        console.log('6Ô∏è‚É£ –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è...');
        await page.type('input[type="password"]', password, { delay: 100 });

        console.log('7Ô∏è‚É£ –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏"...');
        const loginButtons = await page.$$('div[role="button"]');
        await loginButtons[loginButtons.length - 1].click();

        console.log('8Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
        await page.waitForNavigation({ waitUntil: 'networkidle2' });

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç Twitter');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Twitter:', error);
    }
}

//  –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–Ω–∏–∑
async function autoScrollPage(page, existingItems, scrollTime = 10000) {
    const startTime = Date.now();
    console.log(`üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Ç–µ—á–µ–Ω–∏–µ ${scrollTime / 1000} —Å–µ–∫—É–Ω–¥...`);
    while (Date.now() - startTime < scrollTime) {
        await page.evaluate(() => window.scrollBy(0, window.innerHeight)); // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ –Ω–∞ 1 —ç–∫—Ä–∞–Ω
        await new Promise(resolve => setTimeout(resolve, 100)); // –û–∂–∏–¥–∞–Ω–∏–µ 100 –º—Å
    }
    console.log(`‚úÖ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${existingItems.size}`);
}

//  –°–±–æ—Ä –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª—è
async function collectPostsFromProfile(page, username, scrollTime = 10000) {
    try {
        console.log(`1Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è ${username}...`);
        await page.goto(`https://x.com/${username}`, { waitUntil: 'networkidle2' });

        console.log('2Ô∏è‚É£ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–≤–∏—Ç–æ–≤...');
        await page.waitForSelector('article', { timeout: 15000 });

        let posts = new Set();

        const collectPostData = async () => {
            const newPosts = await page.$$eval('article', (articles) => {
                return articles.map((article) => {
                    const tweetContent = article.querySelector('div[lang]') ? article.querySelector('div[lang]').innerText : '';
                    const tweetDate = article.querySelector('time') ? article.querySelector('time').getAttribute('datetime') : '';

                    // üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ª–∞–π–∫–æ–≤
                    let likesElement = article.querySelector('[data-testid="like"]');
                    let tweetLikes = likesElement ? likesElement.innerText : '0';

                    let retweetsElement = article.querySelector('[data-testid="retweet"]');
                    let retweets = retweetsElement ? retweetsElement.innerText : '0';

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)
                    const mediaElements = article.querySelectorAll('img, video');
                    const mediaUrls = Array.from(mediaElements).map(media => media.src);

                    return {
                        tweetContent,
                        tweetDate,
                        tweetLikes,
                        retweets,
                        mediaUrls
                    };
                });
            });

            newPosts.forEach(post => posts.add(JSON.stringify(post)));
        };

        await collectPostData();

        await autoScrollPage(page, posts, scrollTime);
        await collectPostData();

        const uniquePosts = Array.from(posts).map(post => JSON.parse(post));

        console.log(`3Ô∏è‚É£ ‚úÖ –°–æ–±—Ä–∞–Ω–æ ${uniquePosts.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª—è`);
        return uniquePosts;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Ç–≤–∏—Ç–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

//  –°–±–æ—Ä —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ø–æ–∏—Å–∫–∞
async function collectMentionsFromSearch(page, query, scrollTime = 10000) {
    try {
        console.log(`4Ô∏è‚É£ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"...`);
        await page.goto(`https://x.com/search?q=${encodeURIComponent(query)}&src=typed_query&f=live`, { waitUntil: 'networkidle2' });

        console.log('5Ô∏è‚É£ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
        await page.waitForSelector('article', { timeout: 15000 });

        let mentions = new Set();

        const collectMentionData = async () => {
            const newMentions = await page.$$eval('article', (articles) => {
                return articles.map((article) => {
                    const mentionText = article.querySelector('div[lang]') ? article.querySelector('div[lang]').innerText : '';

                    const authorName = article.querySelector('div[dir="ltr"] > span') ? article.querySelector('div[dir="ltr"] > span').innerText : '';

                    // üïí –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞
                    const tweetDate = article.querySelector('time') ? article.querySelector('time').getAttribute('datetime') : '';

                    let likesElement = article.querySelector('[data-testid="like"]');
                    let mentionLikes = likesElement ? likesElement.innerText : '0';

                    return {
                        mentionText,
                        authorName,
                        tweetDate,
                        mentionLikes,

                    };
                });
            });

            newMentions.forEach(mention => mentions.add(JSON.stringify(mention)));
        };

        await collectMentionData();
        await autoScrollPage(page, mentions, scrollTime);
        await collectMentionData();

        const uniqueMentions = Array.from(mentions).map(mention => JSON.parse(mention));

        console.log(`6Ô∏è‚É£ ‚úÖ –°–æ–±—Ä–∞–Ω–æ ${uniqueMentions.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
        return uniqueMentions;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
    }
}

module.exports = {
    loginToTwitter: loginToTwitter,
    collectPostsFromProfile: collectPostsFromProfile,
    collectMentionsFromSearch: collectMentionsFromSearch
};


